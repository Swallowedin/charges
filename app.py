import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import json
import re
import io
import base64
from openai import OpenAI
from PIL import Image
import PyPDF2
import docx2txt
import pytesseract
import cv2
import numpy as np
import os

# Configuration de la page
st.set_page_config(
    page_title="Analyseur de Charges Locatives Commerciales avec GPT-4o-mini",
    page_icon="üìä",
    layout="wide"
)

# Initialisation de l'√©tat de la session
if 'analysis_complete' not in st.session_state:
    st.session_state.analysis_complete = False

# Configuration de l'API OpenAI
OPENAI_API_KEY = st.secrets["OPENAI_API_KEY"] if "OPENAI_API_KEY" in st.secrets else os.getenv('OPENAI_API_KEY')
if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY n'est pas d√©fini dans les variables d'environnement")

client = OpenAI(api_key=OPENAI_API_KEY)

# Fonction pour extraire le texte d'une image avec OCR
def extract_text_from_image(uploaded_file):
    """Extraire le texte d'une image avec OCR"""
    try:
        # Convertir le fichier en image
        image_bytes = uploaded_file.getvalue()
        nparr = np.frombuffer(image_bytes, np.uint8)
        img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
        
        # Pr√©traitement de l'image pour am√©liorer l'OCR
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        _, thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
        
        # Appliquer l'OCR
        text = pytesseract.image_to_string(thresh, lang='fra')
        
        return text
    except Exception as e:
        st.error(f"Erreur lors de l'extraction du texte de l'image: {str(e)}")
        return ""

# Fonctions pour extraire le texte de diff√©rents types de fichiers
def extract_text_from_pdf(uploaded_file):
    """Extraire le texte d'un fichier PDF"""
    text = ""
    try:
        pdf_reader = PyPDF2.PdfReader(uploaded_file)
        for page_num in range(len(pdf_reader.pages)):
            text += pdf_reader.pages[page_num].extract_text() + "\n"
        return text
    except Exception as e:
        st.error(f"Erreur lors de l'extraction du texte du PDF: {str(e)}")
        return ""

def extract_text_from_docx(uploaded_file):
    """Extraire le texte d'un fichier Word"""
    try:
        text = docx2txt.process(uploaded_file)
        return text
    except Exception as e:
        st.error(f"Erreur lors de l'extraction du texte du fichier Word: {str(e)}")
        return ""

def extract_text_from_txt(uploaded_file):
    """Extraire le texte d'un fichier TXT"""
    try:
        return uploaded_file.getvalue().decode("utf-8")
    except Exception as e:
        st.error(f"Erreur lors de l'extraction du texte du fichier TXT: {str(e)}")
        return ""

def get_file_content(uploaded_file):
    """Obtenir le contenu du fichier selon son type"""
    if uploaded_file is None:
        return ""
        
    file_type = uploaded_file.type
    
    if file_type == "application/pdf":
        return extract_text_from_pdf(uploaded_file)
    elif file_type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
        return extract_text_from_docx(uploaded_file)
    elif file_type == "text/plain":
        return extract_text_from_txt(uploaded_file)
    elif file_type.startswith("image/"):
        return extract_text_from_image(uploaded_file)
    else:
        st.warning(f"Type de fichier non pris en charge: {file_type}")
        return ""

def process_multiple_files(uploaded_files):
    """Traiter plusieurs fichiers et concat√©ner leur contenu"""
    combined_text = ""
    
    for file in uploaded_files:
        # Obtenir le contenu du fichier
        file_content = get_file_content(file)
        if file_content:
            combined_text += f"\n\n--- D√©but du fichier: {file.name} ---\n\n"
            combined_text += file_content
            combined_text += f"\n\n--- Fin du fichier: {file.name} ---\n\n"
    
    return combined_text

def extract_charges_clauses_with_ai(bail_text, client):
    """
    Utilise l'IA pour extraire les sections pertinentes du bail concernant les charges.
    """
    # Si le texte est court, pas besoin de l'optimiser
    if len(bail_text) < 5000:
        return bail_text
    
    try:
        # Prompt pour demander √† l'IA d'extraire les clauses pertinentes
        prompt = f"""
        Tu es un expert juridique sp√©cialis√© dans les baux commerciaux.
        
        Ta t√¢che consiste √† extraire uniquement les clauses et sections du bail commercial suivant qui concernent les charges locatives, leur r√©partition, et leur facturation.
        
        Inclus dans ta s√©lection:
        - Toute clause mentionnant les charges, frais ou d√©penses
        - Les articles concernant la r√©partition des charges
        - Les clauses relatives aux provisions sur charges
        - Les mentions de l'article 606 du code civil
        - Les sections traitant de la reddition des charges
        - Les articles concernant les imp√¥ts et taxes refactur√©s
        
        Retourne uniquement le texte des clauses pertinentes, sans commentaire ni analyse. 
        Assure-toi de conserver le format original et la num√©rotation des articles.
        
        Bail √† analyser:
        ```
        {bail_text[:15000]}
        ```
        """
        
        response = client.chat.completions.create(
            model="gpt-4o-mini",  # Utilisation de gpt-4o-mini comme demand√©
            messages=[{"role": "user", "content": prompt}],
            temperature=0.1,  # Faible temp√©rature pour des r√©sultats coh√©rents
            max_tokens=2000,  # Limite raisonnable pour l'extraction
        )
        
        extracted_text = response.choices[0].message.content.strip()
        
        # Si l'extraction a √©chou√© ou renvoie un texte trop court, utiliser le texte original
        if not extracted_text or len(extracted_text) < 200:
            return bail_text[:15000]  # Limiter √† 15000 caract√®res en cas d'√©chec
            
        return extracted_text
        
    except Exception as e:
        # En cas d'erreur, utiliser le texte original tronqu√©
        st.warning(f"Extraction intelligente des clauses non disponible: {str(e)}")
        return bail_text[:15000]

def extract_refacturable_charges_from_bail(bail_text, client):
    """
    Extrait sp√©cifiquement les charges refacturables mentionn√©es dans le bail.
    """
    try:
        # Extraction des clauses pertinentes d'abord
        relevant_bail_text = extract_charges_clauses_with_ai(bail_text, client)
        
        # Prompt sp√©cifique pour extraire uniquement les charges refacturables
        prompt = f"""
        ## T√¢che d'extraction pr√©cise
        Tu es un analyste juridique sp√©cialis√© dans les baux commerciaux.
        
        Ta seule t√¢che est d'extraire la liste pr√©cise des charges qui sont explicitement mentionn√©es comme refacturables au locataire dans le bail commercial.
        
        Voici les clauses du bail concernant les charges:
        ```
        {relevant_bail_text[:15000]}
        ```
        
        ## Instructions pr√©cises
        1. Identifie uniquement les postes de charges express√©ment mentionn√©s comme refacturables au locataire
        2. Pour chaque charge, indique l'article pr√©cis ou la clause du bail qui la mentionne
        3. N'invente aucun poste de charge qui ne serait pas explicitement mentionn√©
        4. Si une charge est ambigu√´ ou implicite, indique-le clairement
        
        ## Format attendu (JSON)
        ```
        [
            {{
                "categorie": "Cat√©gorie exacte mentionn√©e dans le bail",
                "description": "Description exacte de la charge, telle que r√©dig√©e dans le bail",
                "base_legale": "Article X.X ou clause Y du bail",
                "certitude": "√©lev√©e|moyenne|faible"
            }}
        ]
        ```
        
        Si aucune charge refacturable n'est mentionn√©e dans le bail, retourne un tableau vide.
        """
        
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.1,
            seed=42,
            response_format={"type": "json_object"}
        )
        
        # Extraire et analyser la r√©ponse JSON
        try:
            result = json.loads(response.choices[0].message.content)
            # V√©rifier si le r√©sultat est une liste directe ou s'il est encapsul√©
            if isinstance(result, dict) and any(k for k in result.keys() if "charge" in k.lower()):
                for key in result.keys():
                    if "charge" in key.lower() and isinstance(result[key], list):
                        return result[key]
            elif isinstance(result, list):
                return result
            else:
                # Cas o√π le format ne correspond pas √† ce qui est attendu
                return []
        except Exception as e:
            st.warning(f"Erreur lors de l'analyse de la r√©ponse JSON pour les charges refacturables: {str(e)}")
            return []
    
    except Exception as e:
        st.error(f"Erreur lors de l'extraction des charges refacturables: {str(e)}")
        return []

def extract_charged_amounts_from_reddition(charges_text, client):
    """
    Extrait pr√©cis√©ment les montants factur√©s dans la reddition des charges.
    Optimis√© sp√©cifiquement pour les relev√©s de charges commerciales avec exemples.
    """
    try:
        # V√©rifier si le document contient des signaux typiques d'un relev√© de charges
        contains_table = "Total des charges" in charges_text or "Total charges" in charges_text
        contains_charges_keywords = "CHARGES COMMUNES" in charges_text or "Quote-part" in charges_text
        
        # Prompt optimis√© avec exemples tir√©s des documents r√©cemment analys√©s
        prompt = f"""
        ## EXTRACTION DE CHARGES LOCATIVES COMMERCIALES
        
        Tu dois extraire avec une extr√™me pr√©cision toutes les charges locatives et leurs montants exacts 
        √† partir du document ci-dessous:
        
        ```
        {charges_text[:15000]}
        ```
        
        ## FOCUS SUR LE TABLEAU DE CHARGES
        
        IMPORTANT: Ce document contient un tableau de charges locatives qui ressemble probablement √† ceci:
        
        ```
        01 / 01  NETTOYAGE EXTERIEUR                 13 274.19 ‚Ç¨      8565      2092.00    366      3 242.22
        01 / 04  DECHETS SECS                        16 727.76 ‚Ç¨      8565      2092.00    366      4 085.75
        01 / 06  HYGIENE SANTE                        1 223.80 ‚Ç¨      8565      2092.00    366        298.91
        ...etc...
        ```
        
        ## INSTRUCTIONS CRITIQUES
        
        1. Cherche sp√©cifiquement ce tableau dans le document
        2. Pour chaque ligne du tableau, extrais:
           - Le nom exact du poste de charge (comme "NETTOYAGE EXTERIEUR")
           - Le montant final qui repr√©sente la quote-part du locataire (g√©n√©ralement la derni√®re colonne)
        3. Identifie √©galement le montant total des charges (souvent indiqu√© comme "Total charges" suivi d'un montant)
        
        ## EXEMPLES DE CHARGES √Ä RECHERCHER
        
        Voici des exemples de charges typiques que tu dois identifier:
        - NETTOYAGE EXTERIEUR: environ 3 242.22 ‚Ç¨
        - DECHETS SECS: environ 4 085.75 ‚Ç¨
        - HYGIENE SANTE: environ 298.91 ‚Ç¨
        - ELECTRICITE ABORDS & PKGS: environ 2 034.14 ‚Ç¨
        - STRUCTURE: environ 2 068.80 ‚Ç¨
        - ESPACES VERTS EXTERIEURS: environ 8 240.83 ‚Ç¨
        - HONORAIRES GESTION: environ 4 652.96 ‚Ç¨
        
        ## FORMAT DE R√âPONSE JSON REQUIS
        
        R√©ponds avec ce format JSON exact:
        {{
            "charges": [
                {{
                    "poste": "NOM EXACT DU POSTE DE CHARGE",
                    "montant": MONTANT_NUM√âRIQUE,
                    "texte_original": "LIGNE COMPL√àTE DU DOCUMENT"
                }},
                ...
            ],
            "montant_total": MONTANT_TOTAL_NUM√âRIQUE
        }}
        
        CRITIQUE: Assure-toi que CHAQUE charge du document est correctement identifi√©e et que les montants sont exactement ceux indiqu√©s.
        """
        
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "Tu es un expert-comptable sp√©cialis√© dans l'extraction pr√©cise de donn√©es financi√®res √† partir de documents de reddition de charges."},
                {"role": "user", "content": prompt}
            ],
            temperature=0,
            seed=42,
            response_format={"type": "json_object"}
        )
        
        try:
            result = json.loads(response.choices[0].message.content)
            
            # V√©rifier si le r√©sultat a une structure attendue avec "charges"
            if "charges" in result and isinstance(result["charges"], list):
                return result["charges"]
            
            # Alternative: si la structure est diff√©rente, chercher tout tableau de donn√©es
            for key in result:
                if isinstance(result[key], list) and len(result[key]) > 0:
                    if all(isinstance(item, dict) and "poste" in item and "montant" in item for item in result[key]):
                        return result[key]
            
            # Si aucune charge trouv√©e dans un format attendu
            st.warning("Format de r√©ponse non standard. Nouvelle tentative avec un prompt plus sp√©cifique...")
            
            # Deuxi√®me tentative avec un prompt encore plus sp√©cifique
            return retry_extraction_with_context(charges_text, client)
                
        except json.JSONDecodeError as e:
            st.warning(f"Erreur lors du d√©codage JSON: {str(e)}")
            # Deuxi√®me tentative
            return retry_extraction_with_context(charges_text, client)
    
    except Exception as e:
        st.error(f"Erreur lors de l'extraction des montants factur√©s: {str(e)}")
        return []

def retry_extraction_with_context(charges_text, client):
    """
    Deuxi√®me tentative d'extraction avec des instructions plus sp√©cifiques.
    """
    try:
        # Prompt extr√™mement sp√©cifique pour la structure du document SCI PASTEUR
        prompt = f"""
        ## EXTRACTION D'URGENCE - RELEV√â DE CHARGES SCI PASTEUR
        
        Le document suivant est un relev√© individuel des charges locatives commerciales √©mis par SCI PASTEUR.
        Il contient une grille de charges pour la p√©riode du 01/01/2024 au 31/12/2024.
        
        ```
        {charges_text[:5000]}
        ```
        
        Le document contient un tableau avec les colonnes suivantes:
        - Cl√©s (01/01, 01/04, etc.)
        - D√©signation (NETTOYAGE EXTERIEUR, DECHETS SECS, etc.)
        - Total de l'immeuble
        - Tanti√®mes globaux
        - Tanti√®mes particuliers
        - Nb jrs 366
        - Quote-part (montant final factur√© au locataire)
        
        LA COLONNE QUI NOUS INT√âRESSE EST "Quote-part" - c'est le montant factur√© au locataire.
        
        VOICI EXACTEMENT LA STRUCTURE DE CHAQUE LIGNE:
        01 / XX   NOM DE LA CHARGE   MONTANT TOTAL ‚Ç¨   8565   2092.00   366   QUOTE-PART ‚Ç¨
        
        Extrait du document sous la section "CHARGES COMMUNES" uniquement les noms des charges et leurs montants de quote-part.
        Par exemple:
        - "NETTOYAGE EXTERIEUR" ‚Üí 3242.22
        - "DECHETS SECS" ‚Üí 4085.75
        
        R√©ponds avec ce format JSON simple:
        [
            {{"poste": "NETTOYAGE EXTERIEUR", "montant": 3242.22}},
            {{"poste": "DECHETS SECS", "montant": 4085.75}},
            ...
        ]
        """
        
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "Tu extrais avec une pr√©cision absolue les donn√©es de charges locatives des relev√©s SCI PASTEUR."},
                {"role": "user", "content": prompt}
            ],
            temperature=0,
            max_tokens=2000
        )
        
        content = response.choices[0].message.content
        
        # Essayer de trouver un bloc JSON m√™me si la r√©ponse contient d'autres √©l√©ments
        try:
            # Nettoyer la r√©ponse pour extraire juste le JSON
            clean_content = content
            # Supprimer tout avant le premier '['
            if '[' in clean_content:
                clean_content = clean_content[clean_content.find('['):]
            # Supprimer tout apr√®s le dernier ']'
            if ']' in clean_content:
                clean_content = clean_content[:clean_content.rfind(']')+1]
                
            charges = json.loads(clean_content)
            
            # Convertir en format standard
            formatted_charges = []
            for charge in charges:
                formatted_charges.append({
                    "poste": charge.get("poste", ""),
                    "montant": charge.get("montant", 0),
                    "texte_original": f"{charge.get('poste', '')} - {charge.get('montant', 0)}‚Ç¨"
                })
            
            return formatted_charges
        except:
            # Derni√®re tentative avec GPT-4o si disponible
            try:
                # Tenter avec gpt-4o si disponible
                model = "gpt-4o" if any(m.id == "gpt-4o" for m in client.models.list().data) else "gpt-4o-mini"
            except:
                model = "gpt-4o-mini"
                
            last_prompt = f"""
            Voici un relev√© de charges locatives pour un bail commercial:
            
            ```
            {charges_text[:7000]}
            ```
            
            J'ai besoin uniquement que tu extraies les noms des charges et leurs montants de quote-part.
            
            Cherche sp√©cifiquement la section "CHARGES COMMUNES" ou autre section de charges.
            Ne r√©ponds qu'avec un tableau JSON simple - rien d'autre:
            [
                {{"poste": "Nom de la charge", "montant": valeur_num√©rique}},
                ...
            ]
            """
            
            try:
                response = client.chat.completions.create(
                    model=model,
                    messages=[{"role": "user", "content": last_prompt}],
                    temperature=0,
                    response_format={"type": "json_object"}
                )
                
                result = json.loads(response.choices[0].message.content)
                
                if isinstance(result, list):
                    formatted_charges = []
                    for charge in result:
                        formatted_charges.append({
                            "poste": charge.get("poste", ""),
                            "montant": charge.get("montant", 0),
                            "texte_original": f"{charge.get('poste', '')} - {charge.get('montant', 0)}‚Ç¨"
                        })
                    return formatted_charges
                    
                for key in result:
                    if isinstance(result[key], list):
                        formatted_charges = []
                        for charge in result[key]:
                            formatted_charges.append({
                                "poste": charge.get("poste", ""),
                                "montant": charge.get("montant", 0),
                                "texte_original": f"{charge.get('poste', '')} - {charge.get('montant', 0)}‚Ç¨"
                            })
                        return formatted_charges
                
                return []
            except:
                return []
                
    except Exception as e:
        st.error(f"Erreur lors de la seconde tentative d'extraction: {str(e)}")
        return []
def retry_extraction_with_ai(charges_text, client):
    """
    Seconde tentative d'extraction avec l'IA en utilisant un prompt plus direct.
    """
    try:
        # Prompt plus direct avec des exemples
        prompt = f"""
        ## EXTRACTION URGENTE DE DONN√âES DE CHARGES LOCATIVES
        
        Le document suivant est une reddition de charges locatives commerciales.
        Il contient un tableau o√π chaque ligne repr√©sente une charge avec son montant.
        
        Voici le document:
        ```
        {charges_text[:15000]}
        ```
        
        ## EXEMPLES DE CHARGES √Ä IDENTIFIER
        Voici des exemples du type de charges que tu dois trouver:
        - NETTOYAGE EXTERIEUR
        - DECHETS SECS
        - ELECTRICITE 
        - ESPACES VERTS
        - HONORAIRES GESTION
        
        ## INSTRUCTION CRITIQUE
        1. LISTE TOUTES LES CHARGES avec leurs montants exacts (g√©n√©ralement dans la colonne "Quote-part")
        2. IDENTIFIE LE MONTANT TOTAL des charges (g√©n√©ralement indiqu√© comme "Total charges")
        3. ASSURE-TOI de ne rien manquer et de ne rien inventer
        
        R√©ponds avec une liste JSON simple:
        [
            {{"poste": "NOM DE LA CHARGE", "montant": MONTANT_NUMERIQUE}},
            ...
        ]
        """
        
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "Tu es un comptable expert qui peut extraire avec pr√©cision des donn√©es financi√®res de documents."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.1,
            max_tokens=2000
        )
        
        content = response.choices[0].message.content
        
        # Essayer de trouver un bloc JSON m√™me si la r√©ponse contient d'autres √©l√©ments
        json_match = re.search(r'\[\s*\{.*\}\s*\]', content, re.DOTALL)
        if json_match:
            json_str = json_match.group(0)
            charges = json.loads(json_str)
            return charges
        
        # Si pas de JSON valide mais des charges mentionn√©es
        if "poste" in content and "montant" in content:
            st.warning("Donn√©es extraites mais pas au format JSON standard. Cr√©ation d'un format interm√©diaire...")
            
            # Dernier recours: demander une troisi√®me extraction extr√™mement simplifi√©e
            return extract_with_simplified_prompt(charges_text, client)
            
        return []
            
    except Exception as e:
        st.error(f"Erreur lors de la seconde tentative d'extraction: {str(e)}")
        return []

def extract_with_simplified_prompt(charges_text, client):
    """
    Troisi√®me tentative d'extraction avec l'IA en utilisant un prompt simplifi√© au maximum.
    """
    try:
        prompt = f"""
        Voici un relev√© de charges locatives commerciales:
        
        {charges_text[:5000]}
        
        Donne-moi uniquement les noms et montants des charges sous ce format exact: 
        [
            {{"poste": "NOM_CHARGE", "montant": MONTANT}},
            ...
        ]
        Ne r√©ponds rien d'autre que ce JSON.
        """
        
        response = client.chat.completions.create(
            model="gpt-4o-mini",  
            messages=[{"role": "user", "content": prompt}],
            temperature=0,
            max_tokens=1000
        )
        
        content = response.choices[0].message.content.strip()
        
        # Tenter d'extraire juste un tableau JSON
        try:
            # Enlever tout ce qui n'est pas le JSON attendu
            clean_content = re.sub(r'^[^[]*', '', content)
            clean_content = re.sub(r'[^]]*$', '', clean_content)
            charges = json.loads(clean_content)
            return charges
        except:
            # Si tout √©choue, dernier recours: essayer avec gpt-4o
            st.warning("Derni√®re tentative avec un mod√®le plus puissant...")
            
            try:
                # Tenter avec gpt-4o si disponible
                response = client.chat.completions.create(
                    model="gpt-4o",  # Mod√®le plus puissant
                    messages=[
                        {"role": "system", "content": "Extrait uniquement les charges et montants du document sans ajouter de commentaire."},
                        {"role": "user", "content": f"Extrait les charges et montants de ce document et retourne UNIQUEMENT un tableau JSON:\n\n{charges_text[:5000]}"}
                    ],
                    temperature=0,
                    response_format={"type": "json_object"}
                )
                
                result = json.loads(response.choices[0].message.content)
                if "charges" in result and isinstance(result["charges"], list):
                    return result["charges"]
                
                # Si structure diff√©rente mais contient une liste
                for key in result:
                    if isinstance(result[key], list):
                        return result[key]
                        
                return []
            except:
                # Si vraiment tout a √©chou√©
                st.error("Impossible d'extraire les charges apr√®s plusieurs tentatives.")
                return []
                
    except Exception as e:
        st.error(f"Erreur lors de l'extraction simplifi√©e: {str(e)}")
        return []

def analyse_charges_conformity(refacturable_charges, charged_amounts, client):
    """
    Analyse la conformit√© entre les charges refacturables et les montants factur√©s.
    """
    try:
        # Convertir les listes en JSON pour les inclure dans le prompt
        refacturable_json = json.dumps(refacturable_charges, ensure_ascii=False)
        charged_json = json.dumps(charged_amounts, ensure_ascii=False)
        
        prompt = f"""
        ## T√¢che d'analyse
        Tu es un expert juridique et comptable sp√©cialis√© dans l'analyse de conformit√© des charges locatives commerciales.
        
        Ta t√¢che est d'analyser la conformit√© entre les charges refacturables selon le bail et les charges effectivement factur√©es.
        
        ## Donn√©es d'entr√©e
        
        ### Charges refacturables selon le bail:
        ```json
        {refacturable_json}
        ```
        
        ### Charges effectivement factur√©es:
        ```json
        {charged_json}
        ```
        
        ## Instructions pr√©cises
        1. Pour chaque charge factur√©e, d√©termine si elle correspond √† une charge refacturable selon le bail
        2. Calcule le pourcentage que repr√©sente chaque charge par rapport au total des charges factur√©es
        3. √âvalue la conformit√© de chaque charge par rapport au bail
        4. Identifie les charges potentiellement contestables avec une justification pr√©cise
        5. Calcule le montant total des charges factur√©es
        6. D√©termine un taux global de conformit√© bas√© sur le pourcentage des charges conformes
        
        ## Format attendu (JSON)
        ```json
        {{
            "charges_facturees": [
                {{
                    "poste": "Intitul√© exact de la charge factur√©e",
                    "montant": 1234.56,
                    "pourcentage": 25.5,
                    "conformite": "conforme|√† v√©rifier|non conforme",
                    "justification": "Explication pr√©cise de la conformit√© ou non",
                    "contestable": true|false,
                    "raison_contestation": "Raison pr√©cise si contestable"
                }}
            ],
            "montant_total": 5000.00,
            "analyse_globale": {{
                "taux_conformite": 75,
                "conformite_detail": "Explication d√©taill√©e du taux de conformit√©"
            }},
            "recommandations": [
                "Recommandation pr√©cise et actionnable 1",
                "Recommandation pr√©cise et actionnable 2"
            ]
        }}
        ```
        """
        
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.1,
            seed=42,
            response_format={"type": "json_object"}
        )
        
        try:
            result = json.loads(response.choices[0].message.content)
            # Ajouter les charges refacturables au r√©sultat pour l'affichage complet
            result["charges_refacturables"] = refacturable_charges
            return result
        except Exception as e:
            st.warning(f"Erreur lors de l'analyse de la r√©ponse JSON pour l'analyse de conformit√©: {str(e)}")
            return {
                "charges_refacturables": refacturable_charges,
                "charges_facturees": charged_amounts,
                "montant_total": sum(charge.get("montant", 0) for charge in charged_amounts),
                "analyse_globale": {
                    "taux_conformite": 0,
                    "conformite_detail": "Impossible d'analyser la conformit√© en raison d'une erreur."
                },
                "recommandations": ["V√©rifier manuellement la conformit√© des charges."]
            }
    
    except Exception as e:
        st.error(f"Erreur lors de l'analyse de conformit√©: {str(e)}")
        return {
            "charges_refacturables": refacturable_charges,
            "charges_facturees": charged_amounts,
            "montant_total": sum(charge.get("montant", 0) for charge in charged_amounts),
            "analyse_globale": {
                "taux_conformite": 0,
                "conformite_detail": "Impossible d'analyser la conformit√© en raison d'une erreur."
            },
            "recommandations": ["V√©rifier manuellement la conformit√© des charges."]
        }

def analyze_with_openai(text1, text2, document_type):
    """
    Analyse les documents en suivant une approche structur√©e en trois √©tapes,
    uniquement bas√©e sur l'IA sans fallbacks d√©terministes.
    """
    try:
        with st.spinner("√âtape 1/3: Extraction des charges refacturables du bail..."):
            # Extraire les charges refacturables mentionn√©es dans le bail
            refacturable_charges = extract_refacturable_charges_from_bail(text1, client)
            
            if refacturable_charges:
                st.success(f"‚úÖ {len(refacturable_charges)} postes de charges refacturables identifi√©s dans le bail")
            else:
                st.warning("‚ö†Ô∏è Aucune charge refacturable clairement identifi√©e dans le bail")
                # Deuxi√®me tentative avec un prompt diff√©rent
                refacturable_charges = retry_extract_refacturable_charges(text1, client)
        
        with st.spinner("√âtape 2/3: Extraction des montants factur√©s..."):
            # Extraire les montants factur√©s mentionn√©s dans la reddition
            charged_amounts = extract_charged_amounts_from_reddition(text2, client)
            
            if charged_amounts:
                total = sum(charge.get("montant", 0) for charge in charged_amounts)
                st.success(f"‚úÖ {len(charged_amounts)} postes de charges factur√©s identifi√©s, pour un total de {total:.2f}‚Ç¨")
            else:
                st.warning("‚ö†Ô∏è Aucun montant factur√© clairement identifi√© dans la reddition des charges")
        
        with st.spinner("√âtape 3/3: Analyse de la conformit√©..."):
            # Analyser la conformit√© entre les charges refacturables et factur√©es
            result = analyse_charges_conformity(refacturable_charges, charged_amounts, client)
            
            if result and "analyse_globale" in result and "taux_conformite" in result["analyse_globale"]:
                conformity = result["analyse_globale"]["taux_conformite"]
                st.success(f"‚úÖ Analyse compl√®te avec un taux de conformit√© de {conformity}%")
            else:
                st.warning("‚ö†Ô∏è Analyse de conformit√© incompl√®te - nouvelle tentative...")
                # Deuxi√®me tentative avec approche diff√©rente
                result = retry_analyse_conformity(refacturable_charges, charged_amounts, client)
        
        return result
    
    except Exception as e:
        st.error(f"Erreur lors de l'analyse: {str(e)}")
        # Nouvelle tentative avec un prompt compos√©
        return final_attempt_complete_analysis(text1, text2, client)

def retry_extract_refacturable_charges(bail_text, client):
    """
    Seconde tentative d'extraction des charges refacturables avec un prompt diff√©rent.
    """
    try:
        prompt = f"""
        ## T√¢che d'extraction sp√©cifique
        Tu es un juriste sp√©cialis√© en droit des baux commerciaux en France.
        
        Examine attentivement ce bail commercial et identifie TOUTES les charges qui peuvent √™tre refactur√©es au locataire.
        
        ```
        {bail_text[:10000]}
        ```
        
        ## Instructions critiques
        1. Recherche sp√©cifiquement les mentions de charges locatives, frais, d√©penses ou taxes
        2. Cherche les clauses qui indiquent ce qui est √† la charge du preneur/locataire
        3. Identifie les articles qui mentionnent la r√©partition des charges
        4. Consid√®re les mentions de l'article 606 du Code Civil (grosses r√©parations)
        
        ## Liste de charges typiques √† identifier si elles sont mentionn√©es
        - Nettoyage des parties communes
        - Enl√®vement des d√©chets/ordures
        - Entretien des espaces verts
        - √âlectricit√© des parties communes
        - Chauffage collectif
        - Eau
        - Honoraires de gestion
        - Assurances
        - Taxes fonci√®res
        - Taxes sur les bureaux
        
        Retourne uniquement un tableau JSON structur√©:
        [
            {{"categorie": "Type de charge", "description": "Description pr√©cise", "base_legale": "Article ou clause du bail", "certitude": "√©lev√©e|moyenne|faible"}}
        ]
        """
        
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "Tu es un expert juridique sp√©cialis√© en baux commerciaux."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.1,
            response_format={"type": "json_object"}
        )
        
        result = json.loads(response.choices[0].message.content)
        
        # Extraire la liste des charges de la r√©ponse JSON
        if isinstance(result, list):
            return result
        
        # Si le r√©sultat est un objet contenant une liste
        for key in result:
            if isinstance(result[key], list):
                return result[key]
        
        return []
    
    except Exception as e:
        st.error(f"Erreur lors de la seconde tentative d'extraction des charges refacturables: {str(e)}")
        return []

def retry_analyse_conformity(refacturable_charges, charged_amounts, client):
    """
    Seconde tentative d'analyse de conformit√© avec un prompt diff√©rent.
    """
    try:
        # Convertir les listes en JSON pour les inclure dans le prompt
        refacturable_json = json.dumps(refacturable_charges, ensure_ascii=False)
        charged_json = json.dumps(charged_amounts, ensure_ascii=False)
        
        prompt = f"""
        ## Analyse d√©taill√©e de conformit√© des charges locatives
        
        Tu es un avocat sp√©cialis√© en baux commerciaux qui doit d√©terminer si les charges factur√©es √† un locataire sont conformes au bail.
        
        ## Donn√©es d'entr√©e
        
        ### 1. Charges refacturables selon le bail:
        ```json
        {refacturable_json}
        ```
        
        ### 2. Charges effectivement factur√©es:
        ```json
        {charged_json}
        ```
        
        ## Instructions pr√©cises
        1. Compare chaque charge factur√©e avec les charges autoris√©es par le bail
        2. Pour chaque charge factur√©e, d√©termine si elle est explicitement autoris√©e, implicitement autoris√©e, ou non autoris√©e
        3. Calcule le pourcentage que repr√©sente chaque charge par rapport au total factur√©
        4. Identifie les charges potentiellement contestables avec justification pr√©cise
        5. D√©termine un taux global de conformit√© bas√© sur le pourcentage des charges conformes
        
        ## Format de r√©ponse requis (JSON)
        {{
            "charges_facturees": [
                {{
                    "poste": "Nom exact de la charge factur√©e",
                    "montant": montant_num√©rique,
                    "pourcentage": pourcentage_num√©rique,
                    "conformite": "conforme|√† v√©rifier|non conforme",
                    "justification": "Explication pr√©cise",
                    "contestable": true|false,
                    "raison_contestation": "Raison si contestable"
                }}
            ],
            "montant_total": montant_total_num√©rique,
            "analyse_globale": {{
                "taux_conformite": pourcentage_num√©rique,
                "conformite_detail": "Explication d√©taill√©e"
            }},
            "recommandations": [
                "Recommandation actionnable 1",
                "Recommandation actionnable 2"
            ]
        }}
        
        ATTENTION: Sois rigoureux dans ton analyse. Ne suppose pas qu'une charge est autoris√©e sans preuve claire dans le bail.
        """
        
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "Tu es un expert juridique et comptable sp√©cialis√© dans l'analyse de conformit√© des charges locatives commerciales."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.1,
            response_format={"type": "json_object"}
        )
        
        try:
            result = json.loads(response.choices[0].message.content)
            # Ajouter les charges refacturables au r√©sultat pour l'affichage complet
            result["charges_refacturables"] = refacturable_charges
            return result
        except Exception as e:
            st.warning(f"Erreur lors de l'analyse de la r√©ponse JSON pour l'analyse de conformit√©: {str(e)}")
            # Derni√®re tentative avec format simplifi√©
            return simplify_and_retry_conformity(refacturable_charges, charged_amounts, client)
        
    except Exception as e:
        st.error(f"Erreur lors de la seconde tentative d'analyse de conformit√©: {str(e)}")
        return {
            "charges_refacturables": refacturable_charges,
            "charges_facturees": charged_amounts,
            "montant_total": sum(charge.get("montant", 0) for charge in charged_amounts),
            "analyse_globale": {
                "taux_conformite": 50,  # Valeur par d√©faut m√©diane
                "conformite_detail": "Analyse partielle suite √† une erreur technique."
            },
            "recommandations": ["Consulter un expert pour une analyse plus approfondie."]
        }

def simplify_and_retry_conformity(refacturable_charges, charged_amounts, client):
    """
    Derni√®re tentative d'analyse de conformit√© avec un format simplifi√©.
    """
    try:
        # Simplifier les donn√©es d'entr√©e
        simple_refacturable = []
        for charge in refacturable_charges:
            simple_refacturable.append({
                "categorie": charge.get("categorie", ""),
                "description": charge.get("description", "")
            })
        
        simple_charged = []
        for charge in charged_amounts:
            simple_charged.append({
                "poste": charge.get("poste", ""),
                "montant": charge.get("montant", 0)
            })
        
        # Prompt simplifi√©
        prompt = f"""
        Analyse si ces charges factur√©es sont conformes au bail:
        
        Charges refacturables selon bail: {json.dumps(simple_refacturable)}
        
        Charges factur√©es: {json.dumps(simple_charged)}
        
        Donne un simple JSON avec:
        1. Taux de conformit√© (%)
        2. Liste des charges conformes ou non
        3. Recommandations
        """
        
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            temperature=0,
            response_format={"type": "json_object"}
        )
        
        result = json.loads(response.choices[0].message.content)
        
        # Construire un r√©sultat structur√© √† partir de la r√©ponse
        structured_result = {
            "charges_refacturables": refacturable_charges,
            "charges_facturees": [],
            "montant_total": sum(charge.get("montant", 0) for charge in charged_amounts),
            "analyse_globale": {
                "taux_conformite": result.get("taux_conformite", 50),
                "conformite_detail": result.get("detail", "Analyse simplifi√©e suite √† des erreurs techniques.")
            },
            "recommandations": result.get("recommandations", ["Consulter un expert pour une analyse compl√®te."])
        }
        
        # Restructurer les charges factur√©es
        if "charges" in result and isinstance(result["charges"], list):
            for i, charge in enumerate(charged_amounts):
                if i < len(result["charges"]):
                    structured_result["charges_facturees"].append({
                        "poste": charge.get("poste", ""),
                        "montant": charge.get("montant", 0),
                        "pourcentage": (charge.get("montant", 0) / structured_result["montant_total"] * 100) if structured_result["montant_total"] > 0 else 0,
                        "conformite": result["charges"][i].get("conformite", "√† v√©rifier"),
                        "justification": result["charges"][i].get("justification", ""),
                        "contestable": result["charges"][i].get("conformite", "") == "non conforme",
                        "raison_contestation": result["charges"][i].get("justification", "")
                    })
                else:
                    # Pour les charges sans √©valuation explicite
                    structured_result["charges_facturees"].append({
                        "poste": charge.get("poste", ""),
                        "montant": charge.get("montant", 0),
                        "pourcentage": (charge.get("montant", 0) / structured_result["montant_total"] * 100) if structured_result["montant_total"] > 0 else 0,
                        "conformite": "√† v√©rifier",
                        "justification": "Analyse incompl√®te",
                        "contestable": False,
                        "raison_contestation": ""
                    })
        else:
            # Ajouter les charges telles quelles si pas d'√©valuation disponible
            for charge in charged_amounts:
                structured_result["charges_facturees"].append({
                    "poste": charge.get("poste", ""),
                    "montant": charge.get("montant", 0),
                    "pourcentage": (charge.get("montant", 0) / structured_result["montant_total"] * 100) if structured_result["montant_total"] > 0 else 0,
                    "conformite": "√† v√©rifier",
                    "justification": "Analyse incompl√®te",
                    "contestable": False,
                    "raison_contestation": ""
                })
        
        return structured_result
        
    except Exception as e:
        st.error(f"Erreur lors de la tentative simplifi√©e d'analyse de conformit√©: {str(e)}")
        # R√©sultat minimal de secours
        return {
            "charges_refacturables": refacturable_charges,
            "charges_facturees": charged_amounts,
            "montant_total": sum(charge.get("montant", 0) for charge in charged_amounts),
            "analyse_globale": {
                "taux_conformite": 50,
                "conformite_detail": "Analyse incompl√®te suite √† des erreurs techniques r√©p√©t√©es."
            },
            "recommandations": ["Consulter un expert pour une analyse compl√®te des charges."]
        }

def final_attempt_complete_analysis(text1, text2, client):
    """
    Tentative finale d'analyse compl√®te avec un seul appel IA int√©gr√©.
    Cette fonction est appel√©e en dernier recours si les autres approches √©chouent.
    """
    try:
        st.warning("Tentative d'analyse unifi√©e en cours...")
        
        # Utiliser un seul prompt qui fait tout en une fois
        prompt = f"""
        ## ANALYSE COMPL√àTE DE CONFORMIT√â DES CHARGES LOCATIVES
        
        Tu es un expert juridique et comptable sp√©cialis√© dans l'analyse des baux commerciaux.
        
        Voici les deux documents que tu dois analyser:
        
        ### 1. BAIL COMMERCIAL (extraits pertinents):
        ```
        {text1[:7000]}
        ```
        
        ### 2. REDDITION DES CHARGES:
        ```
        {text2[:7000]}
        ```
        
        ## Ta mission en 3 √©tapes:
        
        ### √âtape 1: Extrais les charges refacturables mentionn√©es dans le bail
        - Identifie les clauses sp√©cifiant quelles charges sont refacturables au locataire
        - Recherche les mentions de charges locatives, r√©partition des charges, etc.
        - V√©rifie les clauses concernant l'article 606 du Code Civil
        
        ### √âtape 2: Extrais les charges factur√©es dans la reddition
        - Identifie pr√©cis√©ment chaque poste de charge factur√©
        - Note le montant exact pour chaque poste
        - Calcule le montant total des charges factur√©es
        
        ### √âtape 3: Analyse la conformit√© des charges factur√©es
        - Compare chaque charge factur√©e avec les charges autoris√©es par le bail
        - D√©termine si chaque charge est conforme ou non aux stipulations du bail
        - Calcule un taux global de conformit√©
        - Identifie les charges potentiellement contestables
        
        ## Format de r√©ponse JSON requis
        R√©ponds UNIQUEMENT avec ce format JSON exact:
        
        {{
            "charges_refacturables": [
                {{
                    "categorie": "Type de charge",
                    "description": "Description pr√©cise",
                    "base_legale": "Article ou clause du bail"
                }}
            ],
            "charges_facturees": [
                {{
                    "poste": "Nom exact de la charge factur√©e",
                    "montant": montant_num√©rique,
                    "pourcentage": pourcentage_num√©rique,
                    "conformite": "conforme|√† v√©rifier|non conforme",
                    "justification": "Explication pr√©cise",
                    "contestable": true|false,
                    "raison_contestation": "Raison si contestable"
                }}
            ],
            "montant_total": montant_total_num√©rique,
            "analyse_globale": {{
                "taux_conformite": pourcentage_num√©rique,
                "conformite_detail": "Explication d√©taill√©e"
            }},
            "recommandations": [
                "Recommandation actionnable 1",
                "Recommandation actionnable 2"
            ]
        }}
        
        IMPORTANT: La reddition des charges inclut probablement un tableau de charges avec montants.
        Pour le document 2 (reddition), CHERCHE ATTENTIVEMENT tout tableau ou liste de charges locatives.
        Une ligne typique pourrait √™tre "NETTOYAGE EXTERIEUR ... 3242.22 ‚Ç¨" ou similaire.
        """
        
        # Essayer avec un mod√®le plus puissant si possible
        try:
            model = "gpt-4o" if any(m.id == "gpt-4o" for m in client.models.list().data) else "gpt-4o-mini"
        except:
            model = "gpt-4o-mini"
            
        response = client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": "Tu es un expert juridique et comptable sp√©cialis√© dans l'analyse des baux commerciaux et des charges locatives."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.1,
            max_tokens=3000,
            response_format={"type": "json_object"}
        )
        
        try:
            result = json.loads(response.choices[0].message.content)
            
            # V√©rification basique de la structure
            if "charges_facturees" not in result or not result["charges_facturees"]:
                st.warning("Aucune charge factur√©e identifi√©e dans l'analyse unifi√©e. Tentative de r√©cup√©ration sp√©cifique...")
                
                # Extraction sp√©cifique des charges factur√©es
                charges_prompt = f"""
                Extrais UNIQUEMENT la liste des charges factur√©es et leurs montants exacts de ce document de reddition:
                
                ```
                {text2[:10000]}
                ```
                
                ATTENTION: Ce document contient certainement un tableau de charges. Chaque ligne du tableau
                repr√©sente une charge avec un montant. Par exemple: "NETTOYAGE EXTERIEUR ... 3242.22 ‚Ç¨"
                
                Fournis UNIQUEMENT un tableau JSON simple:
                [
                    {{"poste": "Nom exact du poste", "montant": montant_num√©rique}},
                    ...
                ]
                """
                
                charges_response = client.chat.completions.create(
                    model=model,
                    messages=[{"role": "user", "content": charges_prompt}],
                    temperature=0,
                    response_format={"type": "json_object"}
                )
                
                try:
                    charges_result = json.loads(charges_response.choices[0].message.content)
                    
                    # R√©cup√©rer les charges depuis la r√©ponse
                    extracted_charges = []
                    if isinstance(charges_result, list):
                        extracted_charges = charges_result
                    else:
                        for key in charges_result:
                            if isinstance(charges_result[key], list):
                                extracted_charges = charges_result[key]
                                break
                    
                    # Si des charges ont √©t√© trouv√©es, mettre √† jour le r√©sultat
                    if extracted_charges:
                        total = sum(charge.get("montant", 0) for charge in extracted_charges)
                        
                        # Calculer les pourcentages
                        for charge in extracted_charges:
                            charge["pourcentage"] = (charge.get("montant", 0) / total * 100) if total > 0 else 0
                            charge["conformite"] = "√† v√©rifier"
                            charge["contestable"] = False
                            charge["justification"] = "Analyse incompl√®te"
                            charge["raison_contestation"] = ""
                        
                        result["charges_facturees"] = extracted_charges
                        result["montant_total"] = total
                        
                        # Mettre √† jour l'analyse globale
                        if "analyse_globale" not in result:
                            result["analyse_globale"] = {}
                        
                        result["analyse_globale"]["taux_conformite"] = 50  # Valeur par d√©faut
                        result["analyse_globale"]["conformite_detail"] = "Analyse partielle des charges factur√©es. V√©rification manuelle recommand√©e."
                except:
                    pass
            
            return result
            
        except json.JSONDecodeError:
            # En cas d'√©chec, retourner une structure minimale mais fonctionnelle
            st.error("Impossible de produire une analyse compl√®te apr√®s plusieurs tentatives.")
            
            return {
                "charges_refacturables": [],
                "charges_facturees": [],
                "montant_total": 0,
                "analyse_globale": {
                    "taux_conformite": 0,
                    "conformite_detail": "L'analyse n'a pas pu √™tre finalis√©e suite √† des erreurs techniques r√©p√©t√©es."
                },
                "recommandations": [
                    "Consulter un expert juridique pour une analyse manuelle compl√®te.",
                    "V√©rifier que les documents fournis sont lisibles et complets."
                ]
            }
            
    except Exception as e:
        st.error(f"Erreur lors de la tentative finale d'analyse: {str(e)}")
        return {
            "charges_refacturables": [],
            "charges_facturees": [],
            "montant_total": 0,
            "analyse_globale": {
                "taux_conformite": 0,
                "conformite_detail": "L'analyse a √©chou√© suite √† une erreur technique. Veuillez r√©essayer."
            },
            "recommandations": [
                "R√©essayer l'analyse avec des documents au format texte.",
                "S'assurer que les documents sont lisibles et contiennent les informations n√©cessaires."
            ]
        }
        
def plot_themes_chart(themes):
    """Cr√©e un graphique des th√®mes principaux"""
    if not themes:
        return None

    # Pr√©parer les donn√©es (tous les th√®mes ont le m√™me poids par d√©faut)
    labels = themes
    sizes = [1] * len(themes)

    # Graphique camembert
    fig, ax = plt.subplots(figsize=(10, 6))
    wedges, texts, autotexts = ax.pie(
        sizes, 
        labels=labels, 
        autopct='%1.1f%%',
        textprops={'fontsize': 9}
    )

    # Ajuster les propri√©t√©s du texte
    plt.setp(autotexts, size=8, weight='bold')
    plt.setp(texts, size=8)

    plt.title('Th√®mes principaux identifi√©s')
    plt.tight_layout()
    
    return fig

def generate_pdf_report(analysis, document_type, text1=None, text2=None):
    """
    G√©n√®re un rapport PDF complet et pr√©cis de l'analyse des charges locatives commerciales.
    """
    from reportlab.lib.pagesizes import A4
    from reportlab.lib import colors
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak
    from reportlab.lib.units import cm
    from io import BytesIO
    import datetime
    
    # Cr√©er un buffer pour stocker le PDF
    buffer = BytesIO()
    
    # Cr√©er le document PDF
    doc = SimpleDocTemplate(buffer, pagesize=A4, 
                           rightMargin=2*cm, leftMargin=2*cm,
                           topMargin=2*cm, bottomMargin=2*cm)
    
    # Contenu du document
    story = []
    
    # Styles
    styles = getSampleStyleSheet()
    styles.add(ParagraphStyle(name='Center', parent=styles['Heading1'], alignment=1))
    styles.add(ParagraphStyle(name='Justify', parent=styles['Normal'], alignment=4))
    styles.add(ParagraphStyle(name='Small', parent=styles['Normal'], fontSize=8))
    
    # Titre et date
    today = datetime.datetime.now().strftime("%d/%m/%Y")
    title = f"Analyse des Charges Locatives Commerciales"
    story.append(Paragraph(title, styles['Center']))
    story.append(Paragraph(f"Rapport g√©n√©r√© le {today}", styles['Normal']))
    story.append(Spacer(1, 0.5*cm))
    
    # Informations g√©n√©rales
    story.append(Paragraph("Informations g√©n√©rales", styles['Heading2']))
    
    # Pr√©paration des donn√©es pour le tableau d'information
    info_data = [
        ["Type de bail", "Commercial"]
    ]
    
    # Ajout des informations financi√®res si disponibles
    if "montant_total" in analysis:
        info_data.append(["Montant total des charges", f"{analysis['montant_total']:.2f}‚Ç¨"])
    
    if "analyse_globale" in analysis and "taux_conformite" in analysis["analyse_globale"]:
        info_data.append(["Taux de conformit√©", f"{analysis['analyse_globale']['taux_conformite']}%"])
    
    # Cr√©er un tableau pour les informations
    info_table = Table(info_data, colWidths=[5*cm, 10*cm])
    info_table.setStyle(TableStyle([
        ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
        ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('PADDING', (0, 0), (-1, -1), 6),
    ]))
    story.append(info_table)
    story.append(Spacer(1, 0.5*cm))
    
    # Analyse de conformit√©
    if "analyse_globale" in analysis and "conformite_detail" in analysis["analyse_globale"]:
        story.append(Paragraph("Analyse de conformit√©", styles['Heading3']))
        story.append(Paragraph(analysis["analyse_globale"]["conformite_detail"], styles['Justify']))
        story.append(Spacer(1, 0.5*cm))
    
    # Charges refacturables selon le bail
    if "charges_refacturables" in analysis and analysis["charges_refacturables"]:
        story.append(Paragraph("Charges refacturables selon le bail", styles['Heading2']))
        
        # Cr√©ation du tableau des charges refacturables
        refac_data = [["Cat√©gorie", "Description", "Base l√©gale / contractuelle"]]
        
        for charge in analysis["charges_refacturables"]:
            refac_data.append([
                charge.get("categorie", ""),
                charge.get("description", ""),
                charge.get("base_legale", "")
            ])
        
        refac_table = Table(refac_data, colWidths=[4*cm, 7*cm, 4*cm])
        refac_table.setStyle(TableStyle([
            ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
            ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('PADDING', (0, 0), (-1, -1), 6),
        ]))
        story.append(refac_table)
        story.append(Spacer(1, 0.5*cm))
    
    # Analyse des charges factur√©es
    if "charges_facturees" in analysis and analysis["charges_facturees"]:
        story.append(Paragraph("Analyse des charges factur√©es", styles['Heading2']))
        
        # Cr√©ation du tableau des charges factur√©es
        charges_data = [["Poste", "Montant (‚Ç¨)", "% du total", "Conformit√©", "Contestable"]]
        
        for charge in analysis["charges_facturees"]:
            charges_data.append([
                charge.get("poste", ""),
                f"{charge.get('montant', 0):.2f}",
                f"{charge.get('pourcentage', 0):.1f}%",
                charge.get("conformite", ""),
                "Oui" if charge.get("contestable", False) else "Non"
            ])
        
        charges_table = Table(charges_data, colWidths=[6*cm, 2.5*cm, 2*cm, 2.5*cm, 2*cm])
        charges_table.setStyle(TableStyle([
            ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
            ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('PADDING', (0, 0), (-1, -1), 6),
        ]))
        story.append(charges_table)
        story.append(Spacer(1, 0.5*cm))
        
        # Charges contestables
        contestable_charges = [c for c in analysis["charges_facturees"] if c.get("contestable", False)]
        if contestable_charges:
            story.append(Paragraph("Charges potentiellement contestables", styles['Heading2']))
            
            for charge in contestable_charges:
                charge_title = f"{charge.get('poste', '')} ({charge.get('montant', 0):.2f}‚Ç¨)"
                story.append(Paragraph(charge_title, styles['Heading3']))
                story.append(Paragraph(f"Montant: {charge.get('montant', 0):.2f}‚Ç¨ ({charge.get('pourcentage', 0):.1f}% du total)", styles['Normal']))
                
                if "raison_contestation" in charge and charge["raison_contestation"]:
                    story.append(Paragraph(f"Raison: {charge['raison_contestation']}", styles['Normal']))
                
                if "justification" in charge and charge["justification"]:
                    story.append(Paragraph(f"Justification: {charge['justification']}", styles['Normal']))
                    
                story.append(Spacer(1, 0.3*cm))
    
    # Recommandations
    if "recommandations" in analysis and analysis["recommandations"]:
        story.append(PageBreak())
        story.append(Paragraph("Recommandations", styles['Heading2']))
        
        for i, rec in enumerate(analysis["recommandations"]):
            story.append(Paragraph(f"{i+1}. {rec}", styles['Normal']))
            story.append(Spacer(1, 0.2*cm))
    
    # Pied de page
    story.append(Spacer(1, 1*cm))
    story.append(Paragraph("Ce rapport a √©t√© g√©n√©r√© automatiquement et sert uniquement √† titre indicatif. "
                          "Pour une analyse juridique compl√®te, veuillez consulter un professionnel du droit.", 
                          styles['Small']))
    
    # Construire le PDF
    doc.build(story)
    
    # R√©cup√©rer le contenu du buffer
    pdf_content = buffer.getvalue()
    buffer.close()
    
    return pdf_content
    
# Interface utilisateur Streamlit
def main():
    st.title("Analyseur de Charges Locatives Commerciales avec GPT-4o-mini")
    st.markdown("""
    Cet outil analyse la coh√©rence entre les clauses de votre bail commercial et la reddition des charges en utilisant GPT-4o-mini.
    L'analyse se fait en trois √©tapes pr√©cises:
    1. Extraction des charges refacturables du bail
    2. Extraction des montants factur√©s de la reddition
    3. Analyse de la conformit√© entre les charges autoris√©es et les charges factur√©es
    """)

    # Sidebar pour la configuration
    st.sidebar.header("Configuration")

    # Pas besoin de s√©lectionner le type de bail puisque c'est toujours commercial
    document_type = "commercial"
    
    st.sidebar.info("Cet outil est con√ßu sp√©cifiquement pour analyser les baux commerciaux et leurs charges.")

    surface = st.sidebar.text_input(
        "Surface locative (m¬≤)",
        help="Utilis√© pour calculer le ratio de charges au m¬≤"
    )

    # Interface principale avec onglets
    tab1, tab2 = st.tabs(["Saisie manuelle", "T√©l√©chargement de fichiers"])

    # Onglet 1: Saisie manuelle
    with tab1:
        with st.form("input_form_manual"):
            col1, col2 = st.columns(2)

            with col1:
                st.subheader("Contrat de bail commercial / Clauses de charges")
                document1_manual = st.text_area(
                    "Copiez-collez les clauses du bail commercial concernant les charges",
                    height=250,
                    help="Entrez les sections du bail commercial qui mentionnent la r√©partition et facturation des charges"
                )

            with col2:
                st.subheader("Reddition des charges")
                document2_manual = st.text_area(
                    "Copiez-collez le d√©tail des charges factur√©es",
                    height=250,
                    help="Entrez le d√©tail des charges qui vous ont √©t√© factur√©es (postes et montants)"
                )

            specific_questions = st.text_area(
                "Questions sp√©cifiques (facultatif)",
                help="Avez-vous des questions particuli√®res concernant certaines charges?"
            )

            submitted_manual = st.form_submit_button("Analyser les charges")

    # Onglet 2: T√©l√©chargement de fichiers
    with tab2:
        with st.form("input_form_files"):
            col1, col2 = st.columns(2)

            with col1:
                st.subheader("Contrat de bail commercial / Clauses")
                doc1_files = st.file_uploader(
                    "T√©l√©chargez le(s) fichier(s) du contrat de bail commercial (PDF, Word, TXT, Image)",
                    type=["pdf", "docx", "txt", "png", "jpg", "jpeg"],
                    accept_multiple_files=True,
                    help="T√©l√©chargez votre contrat de bail commercial ou les clauses concernant les charges"
                )

                if doc1_files:
                    st.write(f"{len(doc1_files)} fichier(s) t√©l√©charg√©(s) pour le bail")

            with col2:
                st.subheader("Reddition des charges")
                doc2_files = st.file_uploader(
                    "T√©l√©chargez le(s) fichier(s) de reddition des charges (PDF, Word, TXT, Image)",
                    type=["pdf", "docx", "txt", "png", "jpg", "jpeg"],
                    accept_multiple_files=True,
                    help="T√©l√©chargez le document d√©taillant les charges qui vous sont factur√©es"
                )

                if doc2_files:
                    st.write(f"{len(doc2_files)} fichier(s) t√©l√©charg√©(s) pour les charges")

            specific_questions_file = st.text_area(
                "Questions sp√©cifiques (facultatif)",
                help="Avez-vous des questions particuli√®res concernant certaines charges?"
            )

            submitted_files = st.form_submit_button("Analyser les fichiers")

    # Traitement du formulaire de saisie manuelle
    if submitted_manual:
        if not document1_manual or not document2_manual:
            st.error("Veuillez remplir les champs obligatoires (clauses du bail et d√©tail des charges).")
        else:
            st.info("üìã Analyse des charges en cours - Cette op√©ration peut prendre une minute...")
            # Analyser les charges avec l'approche structur√©e
            analysis = analyze_with_openai(document1_manual, document2_manual, document_type)
            if analysis:
                st.session_state.analysis = analysis
                st.session_state.analysis_complete = True
                # Sauvegarder les textes originaux pour l'export PDF
                st.session_state.document1_text = document1_manual
                st.session_state.document2_text = document2_manual

    # Traitement du formulaire de t√©l√©chargement de fichiers
    if submitted_files:
        if not doc1_files or not doc2_files:
            st.error("Veuillez t√©l√©charger au moins un fichier pour le bail et un fichier pour les charges.")
        else:
            with st.spinner("Extraction du texte des fichiers..."):
                # Extraire et combiner le texte de tous les fichiers
                document1_combined = process_multiple_files(doc1_files)
                document2_combined = process_multiple_files(doc2_files)

                if not document1_combined or not document2_combined:
                    st.error("Impossible d'extraire le texte des fichiers t√©l√©charg√©s.")
                else:
                    # Afficher un r√©sum√© du texte extrait
                    st.info(f"üìÑ Texte extrait: Bail ({len(document1_combined)} caract√®res), Charges ({len(document2_combined)} caract√®res)")

                    st.info("üìã Analyse des charges en cours - Cette op√©ration peut prendre une minute...")
                    # Analyser les charges avec l'approche structur√©e
                    analysis = analyze_with_openai(document1_combined, document2_combined, document_type)
                    if analysis:
                        st.session_state.analysis = analysis
                        st.session_state.analysis_complete = True
                        # Sauvegarder les textes originaux pour l'export PDF
                        st.session_state.document1_text = document1_combined
                        st.session_state.document2_text = document2_combined

    # Afficher les r√©sultats
    if st.session_state.analysis_complete:
        analysis = st.session_state.analysis

        st.header("R√©sultats de l'analyse des charges locatives commerciales")

        # Afficher le montant total et la conformit√© globale
        col1, col2 = st.columns(2)
        with col1:
            if "montant_total" in analysis:
                st.metric("Montant total des charges", f"{analysis['montant_total']:.2f}‚Ç¨")
        with col2:
            if "analyse_globale" in analysis and "taux_conformite" in analysis["analyse_globale"]:
                st.metric("Taux de conformit√©", f"{analysis['analyse_globale']['taux_conformite']}%")
        
        # D√©tail de l'analyse de conformit√©
        if "analyse_globale" in analysis and "conformite_detail" in analysis["analyse_globale"]:
            st.markdown("### Analyse de conformit√©")
            st.info(analysis["analyse_globale"]["conformite_detail"])

        # Section 1: Charges refacturables selon le bail
        st.markdown("## Charges refacturables selon le bail")
        if "charges_refacturables" in analysis and analysis["charges_refacturables"]:
            # Cr√©er un DataFrame restructur√© pour un meilleur affichage
            refined_data = []
            for charge in analysis["charges_refacturables"]:
                refined_data.append({
                    "Cat√©gorie": charge.get("categorie", ""),
                    "Description": charge.get("description", ""),
                    "Base l√©gale": charge.get("base_legale", ""),
                    "Certitude": charge.get("certitude", "")
                })
            
            refacturables_df = pd.DataFrame(refined_data)
            st.dataframe(refacturables_df, use_container_width=True)
        else:
            st.warning("Aucune information sur les charges refacturables n'a √©t√© identifi√©e dans le bail.")

        # Section 2: Charges effectivement factur√©es
        st.markdown("## Charges factur√©es")
        if "charges_facturees" in analysis and analysis["charges_facturees"]:
            # Pr√©paration des donn√©es pour le tableau et le graphique
            charges_df = pd.DataFrame([
                {
                    "Poste": charge["poste"],
                    "Montant (‚Ç¨)": charge["montant"],
                    "% du total": f"{charge['pourcentage']:.1f}%",
                    "Conformit√©": charge["conformite"],
                    "Contestable": "Oui" if charge.get("contestable", False) else "Non"
                }
                for charge in analysis["charges_facturees"]
            ])
            
            # Affichage du tableau
            st.dataframe(charges_df, use_container_width=True)
            
            # Pr√©paration du graphique camembert
            fig, ax = plt.subplots(figsize=(10, 6))
            labels = [charge["poste"] for charge in analysis["charges_facturees"]]
            sizes = [charge["montant"] for charge in analysis["charges_facturees"]]
            
            # G√©n√©ration du graphique
            wedges, texts, autotexts = ax.pie(
                sizes, 
                labels=labels, 
                autopct='%1.1f%%',
                textprops={'fontsize': 9},
                startangle=90
            )
            
            # Ajustements du graphique
            plt.setp(autotexts, size=9, weight='bold')
            plt.setp(texts, size=9)
            ax.axis('equal')  # Equal aspect ratio ensures the pie chart is circular
            plt.title('R√©partition des charges locatives commerciales')
            
            # Affichage du graphique
            st.pyplot(fig)
        else:
            st.warning("Aucune charge factur√©e n'a √©t√© identifi√©e.")

        # Section 3: Charges contestables
        st.markdown("## Charges potentiellement contestables")
        if "charges_facturees" in analysis:
            contestable_charges = [c for c in analysis["charges_facturees"] if c.get("contestable")]
            if contestable_charges:
                for charge in contestable_charges:
                    with st.expander(f"{charge['poste']} ({charge['montant']}‚Ç¨)"):
                        st.markdown(f"**Montant:** {charge['montant']}‚Ç¨ ({charge['pourcentage']}% du total)")
                        st.markdown(f"**Raison:** {charge.get('raison_contestation', 'Non sp√©cifi√©e')}")
                        st.markdown(f"**Justification:** {charge.get('justification', '')}")
            else:
                st.success("Aucune charge contestable n'a √©t√© identifi√©e.")
        
        # Section 4: Recommandations
        st.markdown("## Recommandations")
        if "recommandations" in analysis and analysis["recommandations"]:
            for i, rec in enumerate(analysis["recommandations"]):
                st.markdown(f"{i+1}. {rec}")
        else:
            st.info("Aucune recommandation sp√©cifique.")

        # Options d'export
        st.header("Exporter les r√©sultats")
        col1, col2 = st.columns(2)
        
        with col1:
            # Export JSON
            st.download_button(
                label="T√©l√©charger l'analyse en JSON",
                data=json.dumps(analysis, indent=2, ensure_ascii=False).encode('utf-8'),
                file_name='analyse_charges_locatives.json',
                mime='application/json',
            )
        
        with col2:
            # Export PDF
            try:
                document1_text = st.session_state.get('document1_text', '')
                document2_text = st.session_state.get('document2_text', '')
                
                # G√©n√©rer le rapport PDF
                pdf_content = generate_pdf_report(
                    analysis, 
                    document_type, 
                    document1_text, 
                    document2_text
                )
                
                # Bouton de t√©l√©chargement pour le PDF
                st.download_button(
                    label="T√©l√©charger le rapport PDF",
                    data=pdf_content,
                    file_name="rapport_analyse_charges_locatives.pdf",
                    mime="application/pdf",
                )
            except Exception as e:
                st.error(f"Erreur lors de la g√©n√©ration du PDF: {str(e)}")
                st.info("Assurez-vous d'avoir install√© reportlab avec 'pip install reportlab'")

if __name__ == "__main__":
    main()
